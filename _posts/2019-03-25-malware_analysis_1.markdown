---
layout: default
title: 'Introduction to Malware Analysis: Part 1'
date: '2019-03-25 00:50:03'
tags:
- reversing_and_malware
---
<nav>
	<ul>
   		{% for item in site.data.sitelist.docs %}
      			<a href="{{ item.url }}">{{ item.title }}</a> - 
   		{% endfor %}
	</ul>
</nav>


In the spirit of [Learning Cyber 2](https://d3fiant.io/learningcyber-2/) and understanding how things work, the next few Learning Cyber posts will focus on learning how a sample of malware works. To do this, we'll examine a piece of malware called _Jigsaw_.

----

# IMPORTANT

We'll be analyzing a live sample of Ransomware called _Jigsaw_. You need to be extremely careful to prevent accidental collateral damage. Once you have the Malware downloaded make sure that you **only open and run the malware in a virtual machine with networking turned off**.

----

# Setup

Before we start, we need to grab some necessary tools for analysis.

- [PEStudio](https://www.winitor.com/binaries.html)
- [Process Hacker](https://processhacker.sourceforge.io)
- [ProcMon](https://docs.microsoft.com/en-us/sysinternals/downloads/procmon)
- [Wireshark](https://www.wireshark.org/#download)

Download each of the above tools on the Windows VM that was setup in [Learning Cyber 1](https://d3fiant.io/learningcyber-one/). Make sure to set the networking to _NAT_ so you can access the Internet to download the tools. Once you have each tool downloaded, unzip each file (_Right click -\> Extract All_).

Unfortunately, _Jigsaw_ requires _.Net 3.5_ in order to run and the Windows VM we have setup doesn't have it. Go to the link below to download the _.Net 3.5 Framework_.

- [.NET 3.5 Download](https://www.microsoft.com/en-us/download/details.aspx?id=21)  
Make sure to click _No thanks and continue DirectX End-User Runtime Web Installer_ when the pop-up appears.

Once the installer downloads, double click it to install.

We'll use this setup for the analysis.


**Obtaining Malware**

- [Malware Zoo](https://github.com/ytisf/theZoo)

In your Kali VM, open a terminal and type the following commands:

    mkdir repos
    cd repos
    git clone https://github.com/ytisf/theZoo
    cd theZpp
    pip install --user -r requirements.txt

1. Make a new folder caller _repos_
2. Move into the _repos_ folder
3. Clone _theZoo_ repository from github
4. Move into _theZoo_ folder
5. Install requirements for _theZoo_ (You can ignore any errors)

**What did we just do?**  
The commands above downloaded a tool called _theZoo_, a database of live malware samples. Each sample is encrypted and zipped to prevent accidental execution.

To download _theZoo_, we used a tool called [git](https://git-scm.com). _Git_ is a version control tool. Essentially _git_ gives you a way to save versions of a project. That way, if you break something, you can revert back to a previous version. It also gives people a convenient way to share code or software.


**Transferring the Malware**  
Since we're using the Windows VM for the analysis, we need to get the Malware transfered from the Kali VM to the Windows VM. To do this, change the networking settings on both VMs to _Host-Only_. Lastly, disable _Sharing_ on the Windows VM (_Settings -\> Sharing -\> Uncheck Enable Shared Folders_).


On the Kali VM, open a terminal and run the following commands:

    mkdir repos
    cd /root/repos/theZoo/malwares/Binaries/Ransomware.Jigsaw/
    ifconfig
    ufw allow 80
    python -m SimpleHTTPServer 80

1. Change into the Jigsaw folder
2. Take note of your IP Address
3. Make sure that port 80 is accessible through the firewall.
4. Create a temporary web server to serve up the folder that _Jigsaw_ is in. This will allow you to access the Jigsaw binary from the Windows VM.


On the Windows VM, turn off Windows protections.

- Hit the _Windows Key_
- Type "Windows Security"
- Click "Virus and threat protection" on the left side of the screen
- Click "Manage Settings" under "Virus & threat protection settings.
- Turn off the following settings
  - Real-time protection
  - Cloud-delivered protection
  - Automatic Sample Submission
- Click "App & browser control" on the left side of the screen and disable the following settings
  - Check apps and files
  - Smartscreen for Microsoft Edge
  - Smartscreen for Microsoft Store
- Click "Exploit protection settings"
  - Disable all the the System settings (Control Flow Guard, etc.)

Next, use Internet Explorer to access your Kali VM's web server: _hxxp://192.168.1.3/_ (change the address below to the IP Address of your Kali VM and the hxxp to http).

Click the Ransomware.Jigsaw.zip file to download it to the Windows VM.

In the Kali VM, go back into the terminal (where you have the python server running). Hit _CTRL-C_ (Control and C at the same time) to stop the python server.

Lastly, disable the network interface on the Windows VM by going to _Settings-\>Network Adapter_. Uncheck "Connect Network Adapter".


# Snapshot

Before we begin the analysis, take a snapshot of the Windows VM. Anytime you're analyzing malware, it's important to create a snapshot before the malware is detonated (run). In this case, it's especially important because this sample will encrypt all of the files on the system it runs on.


# Prep for Analysis

Now that the Analysis environment is setup, we need to unzip the the malware. Right click _Ransomware.Jigsaw.zip_ and select _Extract All.._ The password to unzip the archive is _infected_.

Drag the _Jigsaw_ file onto your desktop and rename it to _Jigsaw.exe_  
_Right Click-\>Rename_.

Before we begin, let's go over some basic terminology:

- _Static Analysis_ is the process of analyzing the malware without running it.
- _Dynamic Analysis_ is the process of analyzing the malware while it's running.

There are benefits to both strategies and often both are used to analyze malware. For this exercise, we'll use _Static Analysis_ to glean some information before we analyze using _Dynamic Analysis_. When the malware is actually running, there can be alot going on. Performing _Static_ before _Dynamic_ analysis can guide _Dynamic Analysis_.


# Basic Static Analysis with PEStudio

Open PEStudio by double clicking PEStudio.exe. We'll use PEStudio to examine Jigsaw.exe by dragging it into the main PEStudio window.

![jigsaw_pestudio](https://0xd3fiant.github.io/images/malware_analysis/pestudio_jigsaw.png)

As you can see, PEStudio has given us a wealth of information about the Jigsaw application. We can use it to get a general idea of what Jigsaw might do when running.

Let's start with the version section.

![jigsaw_pestudio_version](https://0xd3fiant.github.io/images/malware_analysis/pestudio_jigsaw_version.png)

**PEStudio Version Section**  
In the version section there's some general information about the executable. Notice the three hash types: md5, sha1, and sha256. Often, Malware can be identified using a hash of the malware. The hash is produced by running the malware through an algorithm to generate a unique (for the most part) value. Every time that that sample of malware is out through the algorithm, it results in the same unique value (Even if its a copy of the malware from another system). For more information on Hashing click [here](https://medium.com/tech-tales/what-is-hashing-6edba0ebfa67) (highly recommended).

While the hash can be used to identify a piece of malware, it isn't a fool-proof technique. All that's needed to change the hash for a specific sample of malware is to make a small change in the code of the malware. Note that renaming the malware will _not_ change the hash for it.


Next examine the following attributes:

- _File Description_ -\> Firefox
- _Internal Name_ -\> BitcoinBlackmailer.exe
- _Legal Copyright_ -\> Copyright 1990-2012 Firefox...
- _Original Filename_ -\> BitcoinBlackmailer.exe
- _Product Name_ -\> Firefox

The attributes above represent meta-data (data about data). When an application is compiled (think built), some meta-data is also created based on the source code. A quick look at the above attributes tells us that, _likely_, the original malware's name was _BitcoinBlackmailer_. It's important to note that this information can be changed at any point after compilation, so it's not 100% fool-proof. In this case, we'll assume that it probably hasn't been altered since the name is so suspicious.

What about the _Firefox_ attributes? From these, we'll make an assumption that the original malware was designed to look like _Firefox_ in an attempt to trick its victims.


Let's move on to the the Strings section.

![jigsaw_pestudio_strings](https://0xd3fiant.github.io/images/malware_analysis/pestudio_jigsaw_strings.png)

**PEStudio Strings Section**  
There are alot of different applications to get the strings from a binary and one of them is PEStudio, but what does "Getting Strings" from a binary mean? Getting the strings from a binary extracts strings from the binary (duh). Let's look a little closer at a binary to get a better understanding of what I mean.

![hexeditor_jigsaw](https://0xd3fiant.github.io/images/malware_analysis/hexeditor_jigsaw.png)

In the image above, I've opened Jigsaw in a hexeditor on my Kali VM. In its most basic form, an application is just a series of 1s and 0s (binary). Since it's really difficult to examine a bunch of 1s and 0s, we often represent the values in hex. Hex is a base-16 number system, while binary is a base-2 number system. Since hex is base-16, you can represent more information per character making it somewhat easier to read. For more information on hex see [here](https://whatis.techtarget.com/definition/hexadecimal).

For our purposes, you just need to know that certain hex values represent ascii values (think text). For the most part, the hex in a hex dump of an application will represent instructions (think computer code), but some will represent text used in the application. A hexeditor or a _Strings_ application will try to translate hex into text. Sometimes though, certain hex values can represent instructions and ascii depending on the context. In these cases, applications that pull "strings" can get mess up.

As you an see above, we see some strings on the right

- "This program cannot.."
- ".reloc"

and some random letters

- "@"
- "S"

The longer strings are likely represent actual ascii text. The single letters are likely just hex values that happen to represent ascii but are really part of an instruction.


Let's continue on to examine some of the strings that PEStudio found in Jigsaw.

- BitcoinBlackmailer.exe -\> We saw this in the version tab, so it makes since that we'd see it in strings.

Notice some interesting strings that may have to do with file manipulation:

- Write
- Replace
- Copy

Lastly, notice some strings that end in .exe:

- firefox.exe -\> May have to do with the version information
- Drbpx.exe -\> Sounds a lot like Dropbox. Maybe the application uses Dropbox for something or maybe it tries to look like Dropbox.


Lastly, the Strings window in PEStudio has some tabs at the top. Click the _Blacklist_ tab and examine the strings that are blacklisted.

![jigsaw_pestudio_blacklist](https://0xd3fiant.github.io/images/malware_analysis/pestudio_jigsaw_blacklist_strings.png)

In the above image, we can see a number of Strings that PEStudio has marked as "blacklist", meaning that they could represent something nefarious. Specifically, notice the _Encrypt File_ and _Decrypt File_. These suggest that the malware may perform some encryption (Makes sense since Jigsaw is Ransomware).


We've just scratched the surface with PEStudio, but we've learned a lot about our malware sample. I'll leave the rest of PEStudio for future investigation. Look around and see what else you can learn about Jigsaw. In the next post, we'll begin _Dynamic Analysis_ of Jigsaw.

